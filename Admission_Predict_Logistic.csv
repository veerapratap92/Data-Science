getwd()
rm(list = ls())

#This dataset is created for prediction of Graduate Admissions from an Indian perspective.
#The dataset contains several parameters which are considered important during the 
#application for Masters Programs. 

#Features in the dataset:

#1. GRE Scores ( 290 to 340 )
#2. TOEFL Scores ( 92 to 120 ) 
#3. University Rating ( 1 to 5 ) 
#4. Statement of Purpose / SOP ( 1 to 5 ) 
#5. Letter of Recommendation Strength / LOR (1 to 5)
#5. Undergraduate GPA / CGPA ( 6.8  to 9.92 ) 
#6. Research Experience ( either 0 or 1 ) 
#7. Chance of Admit - Target Variable ( 0.34 to 0.97 )


#This dataset was built with the purpose of helping students in shortlisting universities 
#with their profiles. The predicted output gives them a fair idea about their chances 
#for a particular university.


``

# reading data set from the repository 
admission = read.csv("Admission_Predict.csv")

#rm(adimission)

#basic EDA.
head(admission)

#Checking for missing values
sum(is.na(admission))

# checking duplicate rows
length(unique(admission$Serial.No.)) == nrow(admission)
# Serial.No.is the primary key with no duplicate values

#Finding variable type
str(admission)

#Knowing more about variables
summary(admission)

#All variables are almost normally disturbuted except "Research"

library(dplyr)
colnames(admission)

#removing invalid or not reqired variables
admission = admission%>%select(-Serial.No.)

#Finding values of target variable 
admission = admission%>%mutate(Admit=ifelse(Chance.of.Admit>=0.5,1,0))

#The 3 most important features for 
#admission to the Master: CGPA, GRE SCORE, and TOEFL SCORE

#The 3 least important features for admission to the Master: Research, LOR, and SOP

#Scatter plot, Frequency curve and Correlation values in one graph

library(GGally)
ggpairs(admission)

#Having Research or not:

#The majority of the candidates in the dataset have research experience.

#Therefore, the Research will be a unimportant feature for the Chance of Admit. 

#The correlation between Chance of Admit and Research was already lower than 
#other correlation values.

admission$Research = as.factor(admission$Research)
admission$Research = as.numeric(admission$Research)
summary(admission)

# Analysing variable 'GRE.Score'
summary(admission$GRE.Score)
quantile(admission$GRE.Score, seq(0,1,0.01))
q1 <- quantile(admission$GRE.Score, c(0.25))
q3 <- quantile(admission$GRE.Score, c(0.75))
IQR <- q3 - q1  
upper_range <- q3 + 1.5*IQR  
lower_range <- q1 - 1.5*IQR
nrow(admission[admission$GRE.Score > upper_range,])
nrow(admission[admission$GRE.Score < lower_range,])
# No Outliers

# Analysing variable 'TOEFL.Score'
summary(admission$TOEFL.Score)
quantile(admission$TOEFL.Score, seq(0,1,0.01))
q1 <- quantile(admission$TOEFL.Score, c(0.25))
q3 <- quantile(admission$TOEFL.Score, c(0.75))
IQR <- q3 - q1  
hupper_range <- q3 + 1.5*IQR  
lower_range <- q1 - 1.5*IQR
nrow(admission[admission$TOEFL.Score > upper_range,])
nrow(admission[admission$TOEFL.Score < lower_range,])
# No Outliers

# Analysing variable 'CGPA'
summary(admission$CGPA)
quantile(admission$CGPA, seq(0,1,0.01))
q1 <- quantile(admission$CGPA, c(0.25))
q3 <- quantile(admission$CGPA, c(0.75))
IQR <- q3 - q1  
upper_range <- q3 + 1.5*IQR  
lower_range <- q1 - 1.5*IQR
nrow(admission[admission$CGPA > upper_range,])
nrow(admission[admission$CGPA < lower_range,])
# 1 outliers in upper range of 'CGPA'
# Treating outliers
admission$CGPA[which(admission$CGPA < lower_range)] <- lower_range
